buildscript {
    ext {
        ci = hasProperty("ci")
    }

    ext.buildConfig = [
        'compileSdk': 28,
        'minSdk'    : 19,
        'targetSdk' : 28,
        'version'   : [
            'major'   : 0,
            'minor'   : 1,
            'patch'   : 2,
            'build'   : 0
        ],
        'signing'   : [
            'debug'  : [
                'alias'   : "androiddebugkey",
                'password': "android"
            ],
            'release': [
                'alias'   : property('ANDROID_GRADLE_PUBLISH_EXAMPLE_ALIAS'),
                'password': property('ANDROID_GRADLE_PUBLISH_EXAMPLE_PASSWORD')
            ]
        ]
    ]

    ext.buildConfig.version['name'] = "${buildConfig.version.major}.${buildConfig.version.minor}.${buildConfig.version.patch}"
    ext.buildConfig.version['fullName'] = "${buildConfig.version.name}.${buildConfig.version.build}"
    ext.buildConfig.version['code'] = buildConfig.version.major * 1000000 + buildConfig.version.minor * 10000 + buildConfig.version.patch * 100 + buildConfig.version.build

    ext.versions = [
        'java'            : '1.8',
        'kotlin'          : '1.3.10',
        'kotlinCoroutines': '1.0.1',
        'espresso'        : '3.1.0'
    ]

    ext.deps = [
        'kotlin'        : [
            'stdlib'    : [
                'jdk': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",
            ],
            'coroutines': [
                'jdk'    : "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${versions.kotlinCoroutines}",
                'android': "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinCoroutines}",
            ],
            'test'      : [
                'annotations': "org.jetbrains.kotlin:kotlin-test-annotations-common:${versions.kotlin}",
                'jdk'        : "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}",
            ],
        ],
        'androidx'      : [
            'annotations'     : 'androidx.annotation:annotation:1.0.0',
            'appCompat'       : 'androidx.appcompat:appcompat:1.0.0',
            'browser'         : 'androidx.browser:browser:1.0.0',
            'constraintLayout': 'androidx.constraintlayout:constraintlayout:1.1.3',
            'core'            : 'androidx.core:core-ktx:1.0.0',
            'recyclerView'    : 'androidx.recyclerview:recyclerview:1.0.0',
            'sqliteFramework' : 'androidx.sqlite:sqlite-framework:1.0.0',
            'test'            : [
                'runner'  : 'androidx.test:runner:1.1.0',
                'rules'   : 'androidx.test:rules:1.1.0',
                'espresso': [
                    'core'   : "androidx.test.espresso:espresso-core:$versions.espresso",
                    'intents': "androidx.test.espresso:espresso-intents:$versions.espresso",
                    'contrib': "androidx.test.espresso:espresso-contrib:$versions.espresso"
                ],
                'ext'     : [
                    'junit': 'androidx.test.ext:junit:1.0.0'
                ]
            ]
        ],
        'material'      : 'com.google.android.material:material:1.0.0',
        'junit'         : 'junit:junit:4.12',
        'mockito'       : [
            'inline': 'org.mockito:mockito-inline:2.23.0'
        ],
        'robolectric'   : 'org.robolectric:robolectric:4.0',
        'truth'         : 'com.google.truth:truth:0.42',
        'compileTesting': 'com.google.testing.compile:compile-testing:0.15'
    ]

    repositories {
        google()
        gradlePluginPortal()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.0-alpha02'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath 'gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:6.2.1'
        classpath 'com.novoda:gradle-android-command-plugin:2.0.1'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.8.4'
        classpath 'com.vanniktech:gradle-android-apk-size-plugin:0.4.0'
        classpath 'de.halfbit:autoplay:1.1.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
    }
}

allprojects {
    repositories {
        google()
        gradlePluginPortal()
    }
}

apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'org.jetbrains.kotlin.android.extensions'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'android-command'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.vanniktech.android.apk.size'
apply plugin: 'android-autoplay'
apply plugin: 'com.github.ben-manes.versions'

android {
    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        applicationId 'burrows.apps.android.ci'

        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk

        versionCode buildConfig.version.code
        versionName buildConfig.version.name

        resConfigs 'en'

        vectorDrawables.useSupportLibrary true

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    compileOptions {
        sourceCompatibility versions.java
        targetCompatibility versions.java
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
        lintConfig file('config/lint.xml')

        checkAllWarnings true
        warningsAsErrors true
        // checkDependencies true
        checkTestSources true

        // We run a full lint analysis as build part in CI, so skip vital checks for assemble task.
        checkReleaseBuilds false
    }

    signingConfigs {
        debug {
            storeFile file('config/debug.keystore')
            storePassword buildConfig.signing.debug.password
            keyAlias buildConfig.signing.debug.alias
            keyPassword buildConfig.signing.debug.password
        }

        release {
            storeFile file('config/release.keystore')
            storePassword buildConfig.signing.release.password
            keyAlias buildConfig.signing.release.alias
            keyPassword buildConfig.signing.release.password
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile 'config/proguard-rules.pro'
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile 'config/proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    dexOptions.preDexLibraries !ci

    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources true
            returnDefaultValues true
        }
    }

    packagingOptions {
        exclude '**/*.kotlin_module'
        exclude '**/*.version'
        exclude '**/kotlin*/**'
        exclude '**/*.txt'
        exclude '**/*.xml'
        exclude '**/*.properties'
    }
}

dependencies {
    implementation deps.androidx.constraintLayout
    implementation deps.material
    implementation deps.kotlin.stdlib.jdk
    implementation deps.kotlin.coroutines.jdk
    implementation deps.kotlin.coroutines.android

    testImplementation deps.junit
    testImplementation deps.truth
    testImplementation deps.kotlin.test.annotations
    testImplementation deps.kotlin.test.jdk
}

autoplay {
    track property('track', 'alpha')
    secretJsonBase64 property('ANDROID_GRADLE_PUBLISH_EXAMPLE_KEY')
}

tasks.withType(JavaCompile) {
    sourceCompatibility = versions.java
    targetCompatibility = versions.java

    configure(options) {
        compilerArgs << '-Xlint:all'
        compilerArgs << '-Xlint:-options'
        compilerArgs << '-Xlint:-classfile'
        compilerArgs << '-Werror'
        encoding = 'utf-8'
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat 'full'
        showCauses true
        showExceptions true
        showStackTraces true
        events = ['failed', 'skipped']
    }

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

tasks.withType(JavaForkOptions) {
    jvmArgs << '-XX:+UseCompressedOops'
    jvmArgs << '-Djava.awt.headless=true'
    jvmArgs << '-Dapple.awt.UIElement=true'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        jvmTarget = versions.java
        allWarningsAsErrors = true
    }
}

def property(name) {
    property(name, '')
}

def property(name, defaultValue) {
    properties[name] ?: (System.getenv(name) ?: defaultValue)
}
